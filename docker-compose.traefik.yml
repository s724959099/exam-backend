version: '3'
services:
  traefik:
    networks:
      - traefik-public
    container_name: traefik
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesResolvers.le.acme.email=${EMAIL}"
      - "--certificatesResolvers.le.acme.storage=acme.json"
      - "--certificatesResolvers.le.acme.tlsChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json
    labels:
      - "--log.level=DEBUG"
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-public"
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.docker.network=traefik-public

      # use subdomain to get port 8080
      - traefik.http.routers.http_catchall.rule=Host(`traefik.${DOMAIN}`)

      - traefik.http.routers.http_catchall.tls=true
      - traefik.http.routers.http_catchall.tls.certresolver=le
      - traefik.http.services.http_catchall.loadbalancer.server.port=8080

      # Redirect all HTTP traffic to HTTPS
      - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.to-https.entrypoints=web
      - traefik.http.routers.to-https.middlewares=to-https
      - traefik.http.middlewares.to-https.redirectscheme.scheme=https

      # traefik auth
#      - traefik.http.routers.http_catchall.middlewares=auth
#      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}

networks:
  traefik-public:
    external:
      name: 'traefik-public'